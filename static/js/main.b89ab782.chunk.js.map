{"version":3,"sources":["TodoListHeader.jsx","TodoListTask.jsx","TodoListTasks.jsx","Button.jsx","TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","newTaskTitleRef","React","createRef","onAddTaskClick","newTitle","_this","current","value","props","addTask","react_default","a","createElement","className","ref","this","type","placeholder","onClick","Component","TodoListTask","onIsDoneChanged","e","changeStatus","task","currentTarget","checked","render","isDone","onChange","title","priority","TodoListTasks","tasksEls","tasks","map","t","src_TodoListTask","Button","onClickFn","btnClass","TodoListFooter","classForAll","filterValue","classForCompleted","classForActive","src_Button","changeFilter","App","state","newTask","Object","objectSpread2","setState","newFilterValue","newTasks","concat","toConsumableArray","src_TodoListHeader","src_TodoListTasks","filter","src_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b89ab782.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass TodoListHeader extends React.Component {\n\n        newTaskTitleRef = React.createRef();\n\n\n    onAddTaskClick = () => {\n        let newTitle = this.newTaskTitleRef.current.value;\n        //this.newTasksTitleRef.current.value = '';\n        this.props.addTask(newTitle);\n    };\n\n    render() {\n\n\n        return (\n\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input ref={ this.newTaskTitleRef } type=\"text\" placeholder=\"New task name\"/>\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n\n        );\n\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\n\n\nclass TodoListTask extends React.Component   {\n    onIsDoneChanged =(e) =>{\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\n        // alert(e.currentTarget.checked);\n\n    }\n\n    render = () => {\n\n        return (\n            <div className=\"todoList-tasks\">\n                <div className=\"todoList-task\">\n                    <input type=\"checkbox\"\n                           checked={this.props.task.isDone}\n                           onChange={this.onIsDoneChanged}\n                    />\n                    <span>{this.props.title} {this.props.priority}</span>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './TodoListTask'\nimport TodoListTask from \"./TodoListTask\";\n\n\nclass TodoListTasks extends React.Component   {\n    render = () => {\n\n        let tasksEls = this.props.tasks.map((t) => {\n             return <TodoListTask task = {t}\n                                  title={t.title}\n                                   isDone={t.isDone}\n                                   priority={t.priority}\n                 changeStatus={this.props.changeStatus}\n             />\n        });\n\n\n        return (\n            <div className=\"todoList-tasks\">\n\n                {tasksEls}\n\n                {/* <TodoListTask title={this.props.tasks[0].title} isDone={this.props.tasks[0].isDone}/>\n                <TodoListTask title={this.props.tasks[1].title} isDone={this.props.tasks[1].isDone}/>\n                <TodoListTask title={this.props.tasks[2].title} isDone={this.props.tasks[2].isDone}/>\n                <TodoListTask title={this.props.tasks[3].title} isDone={this.props.tasks[3].isDone}/>\n                */}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\n\n\n\nclass Button extends React.Component  {\n\n    render = () => {\n        return (\n\n                <button onClick={this.props.onClickFn}\n                        className={this.props.btnClass}>\n                    {this.props.title}\n                </button>\n\n\n        );\n    }\n}\n\nexport default Button;\n\n","import React from 'react';\nimport Button from \"./Button\";\n\n\n\nclass TodoListFooter extends React.Component  {\n\n    render = () => {\n    let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n    let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n    let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n\n        return (\n            <div className=\"todoList-footer\">\n                <Button title={'All'}\n                        btnClass={classForAll}\n                        onClickFn={() => {this.props.changeFilter('All')}}\n                />\n                <Button title={'Completed'}\n                        btnClass={classForCompleted}\n                        onClickFn={() => {this.props.changeFilter('Completed')}}\n                />\n                <Button title={'Active'}\n                        btnClass={classForActive}\n                        onClickFn={() => {this.props.changeFilter('Active')}}\n                />\n                {/*<button onClick={ () => {this.props.changeFilter('All')}} className={classForAll}>All</button>*/}\n                {/*<button onClick={ () => {this.props.changeFilter('Completed')}} className={classForCompleted}>Completed</button>*/}\n                {/*<button onClick={ () => {this.props.changeFilter('Active')}} className={classForActive}>Active</button>*/}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\n\nclass App extends React.Component {\n\n\n    state = {\n        tasks: [\n            {title: 'CSS', isDone: true, priority: 'high'},\n            {title: 'JS', isDone: true, priority: 'low'},\n            {title: 'HTML', isDone: false, priority: 'high'},\n            {title: 'React', isDone: false, priority: 'low'},\n            {title: 'Angular', isDone: true, priority: 'high'},\n        ],\n        filterValue: 'All'\n    };\n\n    changeStatus = (task, isDone) => {\n        let newTask = this.state.tasks.map(t => {\n            if (t != task) {\n                return t\n            } else {\n                return {...t, isDone: isDone}\n            }\n        });\n        this.setState({tasks: newTask})\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue})\n    };\n\n    addTask = (newTitle) => {\n        let newTask = {\n            title: newTitle,\n            isDone: false,\n            priority: 'low'\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({tasks: newTasks})\n\n    };\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask}/>\n                    <TodoListTasks\n                        changeStatus={this.changeStatus}\n                        tasks={this.state.tasks.filter(t => {\n                            if (this.state.filterValue === 'All') {\n                                return true;\n                            }\n                            if (this.state.filterValue === 'Active') {\n                                return t.isDone === false;\n                            }\n                            if (this.state.filterValue === 'Completed') {\n                                return t.isDone === true;\n                            }\n                        })}/>\n                    <TodoListFooter\n                        filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}