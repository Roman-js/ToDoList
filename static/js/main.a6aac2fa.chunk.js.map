{"version":3,"sources":["api.ts","reducer.ts","TodoListTask.tsx","TodoListTasks.tsx","Button.tsx","TodoListFooter.tsx","AddNewItemForm.tsx","TodoListTitle.tsx","TodoListHeader.tsx","TodoList.tsx","App.tsx","serviceWorker.js","store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","newTitle","todolistId","post","concat","title","get","taskId","delete","todoListId","task","put","updateTitle","ADD_TASK","initialState","todolists","changeTitleTodolist","type","reducer","state","arguments","length","undefined","action","Object","objectSpread2","toConsumableArray","newTodolist","map","tl","id","tasks","newTask","t","obj","filter","todolist","TodoListTask","editMode","_this","props","activateEditMode","setState","deactivateEditMode","changeTitle","onIsDoneChanged","e","status","currentTarget","checked","changeStatus","onTitleChanged","value","deleteTask","deleteTaskTC","render","classForTask","react_default","a","createElement","className","onChange","autoFocus","onBlur","onClick","priority","React","Component","connectedTodoListTask","connect","dispatch","then","res","data","resultCode","TodoListTasks","tasksEls","src_TodoListTask","isDone","Button","onClickFn","btnClass","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","Fragment","src_Button","AddNewItemForm","error","onAddItemClick","addItem","onAddItemEnterPress","key","classForInput","this","placeholder","onKeyPress","TodoListTitle","currentTitle","activeMode","changeTitleTC","titleChanged","deleteTodolist","TodoListHeader","src_TodoListTitle","src_AddNewItemForm","TodoList","restoreState","loadTasksThunk","deleteTodolistTC","changeTask","changedTask","find","changeTaskTC","newFilterValue","addTask","addTaskTC","_this$props$tasks","src_TodoListHeader","src_TodoListTasks","src_TodoListFooter","ConnectedTodoList","allTasks","items","getTasks","item","catch","err","App","restoreTodolistTC","addTodolist","addTodolistTC","src_TodoList","ConnectedApp","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAKMA,SAAWC,EAAMC,OAAO,CAC1BC,QAAS,2DACTC,iBAAiB,EACjBC,QAAS,CAACC,UAAW,0CAIZC,EAAM,SACJC,EAAkBC,GAC5B,OAAOT,EAASU,KAAT,GAAAC,OAAiBF,EAAjB,UAAqC,CAACG,MAAMJ,KAF3CD,EAAM,SAKAK,GACX,OAAOZ,EAASU,KAAK,GAAI,CAACE,MAAOA,KAN5BL,EAAM,WAWX,OAAOP,EAASa,IAAoB,KAX/BN,EAAM,SAcNO,GACT,OAAOd,EAASa,IAAT,GAAAF,OAAsCG,EAAtC,YAfEP,EAAM,SAkBAE,GACd,OAAOT,EAASe,OAAT,GAAAJ,OAAmBF,KAnBlBF,EAAM,SAsBPS,EAAoBF,EAAgBG,GAE3C,OAAQjB,EAASkB,IAAT,GAAAP,OAAgBK,EAAhB,WAAAL,OAAoCG,GAAUG,IAxB9CV,EAAM,SA2BJE,EAAoBK,GAC9B,OAAQd,EAASe,OAAT,GAAAJ,OAAmBF,EAAnB,WAAAE,OAAuCG,KA5BvCP,EAAM,SA+BGS,EAAoBG,GAElC,OAAOnB,EAASkB,IAAT,GAAAP,OAAgBK,GAAc,CAACJ,MAAOO,KCtCxCC,EAAW,4BASlBC,EAAiC,CACnCC,UAAW,IA4HFC,EAAsB,SAACd,EAAoBD,GAArB,MAA0E,CAACgB,KAhIzE,yCAgIsGf,aAAYD,aA2IxIiB,EAhQC,WAAoE,IAAnEC,EAAmEC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3DN,EAAcS,EAA6CH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEhF,OAAQC,EAAON,MAEX,IAtBoB,gCAuBhB,OAAOO,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAS,GAAAX,OAAAoB,OAAAE,EAAA,EAAAF,CAAML,EAAMJ,WAAZ,CAAuBQ,EAAOI,gBAG/C,KAAKd,EACD,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAWI,EAAMJ,UAAUa,IACvB,SAAAC,GACI,OAAIA,EAAGC,KAAOP,EAAOd,WACVe,OAAAC,EAAA,EAAAD,CAAA,GAAIK,EAAX,CAAeE,MAAK,GAAA3B,OAAAoB,OAAAE,EAAA,EAAAF,CAAMK,EAAGE,OAAT,CAAgBR,EAAOS,YAEpCH,MAK3B,IAvCmB,+BAyCf,OAAOL,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UACII,EAAMJ,UAAUa,IAAI,SAAAC,GAChB,OAAIA,EAAGC,KAAOP,EAAOd,WACVe,OAAAC,EAAA,EAAAD,CAAA,GACAK,EADP,CACWE,MAAOF,EAAGE,MAAMH,IAAI,SAAAK,GACvB,OAAIA,EAAEH,KAAOP,EAAOhB,OAET0B,EAGAT,OAAAC,EAAA,EAAAD,CAAA,GAAIS,EAAX,GAAiBV,EAAOW,SAK7BL,MAK3B,IA1D6B,yCA2DzB,OAAOL,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CACcJ,UAAWI,EAAMJ,UAAUa,IAAI,SAAAK,GACrC,OAAIA,EAAEH,KAAOP,EAAOrB,WACTsB,OAAAC,EAAA,EAAAD,CAAA,GACAS,EADP,CACU5B,MAAOkB,EAAOtB,WAGjBgC,MAKvB,IA3EuB,mCA4EnB,OAAOT,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAWI,EAAMJ,UAAUoB,OAAO,SAAAN,GAAE,OAAIA,EAAGC,KAAOP,EAAOd,eAGjE,IAhFmB,+BAkFf,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAWI,EAAMJ,UAAUa,IAAI,SAAAC,GACvB,OAAIA,EAAGC,KAAOP,EAAOd,WACVoB,EAEAL,OAAAC,EAAA,EAAAD,CAAA,GACAK,EADP,CACWE,MAAOF,EAAGE,MAAMI,OAAO,SAAAF,GAAC,OAAIA,EAAEH,KAAOP,EAAOhB,eAO3E,IA/FoB,gCAgGhB,OAAOiB,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAWQ,EAAOR,UAAUa,IAAI,SAAAQ,GAAQ,OAAAZ,OAAAC,EAAA,EAAAD,CAAA,GAASY,EAAT,CAAmBL,MAAO,SAI1E,IArGiB,6BAsGb,OAAOP,OAAAC,EAAA,EAAAD,CAAA,GACAL,EADP,CAEIJ,UAAWI,EAAMJ,UAAUa,IAAI,SAAAC,GAC3B,OAAIA,EAAGC,KAAOP,EAAOrB,WACVsB,OAAAC,EAAA,EAAAD,CAAA,GAAIK,EAAX,CAAeE,MAAOR,EAAOQ,QAEtBF,MAS3B,OAAOV,GC5GLkB,6MACFlB,MAAmB,CACfmB,UAAU,EACVjC,MAAOkC,EAAKC,MAAM9B,KAAKL,SAG3BoC,iBAAmB,WACfF,EAAKG,SAAS,CAACJ,UAAU,OAE7BK,mBAAqB,WACjBJ,EAAKG,SAAS,CAACJ,UAAU,IACzBC,EAAKC,MAAMI,YAAYL,EAAKC,MAAM9B,KAAKoB,GAAIS,EAAKpB,MAAMd,UAG1DwC,gBAAkB,SAACC,GAEf,IAAIC,EAASD,EAAEE,cAAcC,QAAU,EAAI,EAC3CV,EAAKC,MAAMU,aAAaX,EAAKC,MAAM9B,KAAKoB,GAAIiB,MAGhDI,eAAiB,SAACL,GACdP,EAAKG,SAAS,CAACrC,MAAOyC,EAAEE,cAAcI,WAG1CC,WAAa,WACTd,EAAKC,MAAMc,aAAaf,EAAKC,MAAM/B,WAAY8B,EAAKC,MAAM9B,KAAKoB,OAUnEyB,OAAS,WACL,IAAIC,EAA2C,IAA3BjB,EAAKC,MAAM9B,KAAKqC,OAC9B,qBACA,gBACN,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GACZC,EAAAC,EAAAC,cAAA,SAAO1C,KAAK,WACLgC,QAAoC,IAA3BV,EAAKC,MAAM9B,KAAKqC,OACzBc,SAAUtB,EAAKM,kBAErBN,EAAKpB,MAAMmB,SAAWmB,EAAAC,EAAAC,cAAA,SAAOP,MAAOb,EAAKpB,MAAMd,MAClByD,WAAW,EACXD,SAAUtB,EAAKY,eACfY,OAAQxB,EAAKI,qBACvCc,EAAAC,EAAAC,cAAA,QAAMK,QAASzB,EAAKE,kBACjBF,EAAKC,MAAM9B,KAAKL,MADnB,IAC2BkC,EAAKC,MAAMyB,UAG1CR,EAAAC,EAAAC,cAAA,UAAQK,QAASzB,EAAKc,YAAtB,qCAtDOa,IAAMC,WA+ElBC,EAFeC,YATN,SAAClD,GAErB,MAAO,CACHJ,UAAWI,EAAMiB,SAASrB,YAMqB,CAACuC,aDiK5B,SAAC7C,EAAoBF,GAC7C,OAAM,SAAC+D,GACHtE,EAAeS,EAAYF,GACtBgE,KAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACRJ,EA9HM,SAAC/D,EAAgBE,GAAjB,MAA+D,CAACQ,KAhI/D,+BAgIkFV,SAAQE,cA8HxF4C,CAAW9C,EAAQE,SCtKlB4D,CAAyChC,GCnDxDsC,6MA/BXpB,OAAS,WAEL,IAAIqB,EAAWrC,EAAKC,MAAMT,MAAMH,IAAI,SAACK,GACjC,OAAOwB,EAAAC,EAAAC,cAACkB,EAAD,CAAcnE,KAAMuB,EACN5B,MAAO4B,EAAE5B,MACTyE,OAAQ7C,EAAEc,OACVkB,SAAUhC,EAAEgC,SACZf,aAAcX,EAAKC,MAAMU,aACzBN,YAAaL,EAAKC,MAAMI,YACxBnC,WAAY8B,EAAKC,MAAM/B,eAMhD,OACIgD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEVgB,iCArBWV,IAAMC,WCOnBY,6MAdXxB,OAAS,WACL,OAEQE,EAAAC,EAAAC,cAAA,UAAQK,QAASzB,EAAKC,MAAMwC,UACpBpB,UAAWrB,EAAKC,MAAMyC,UACzB1C,EAAKC,MAAMnC,qCAPX6D,IAAMC,WCsDZe,6MA3CX/D,MAAmB,CACfgE,UAAU,KAGdC,iBAAmB,WAAO7C,EAAKC,MAAM6C,aAAa,UAClDC,uBAAyB,WAAO/C,EAAKC,MAAM6C,aAAa,gBACxDE,oBAAsB,WAAOhD,EAAKC,MAAM6C,aAAa,aACrDG,mBAAqB,WAAOjD,EAAKG,SAAS,CAACyC,UAAS,OACpDM,mBAAqB,WAAOlD,EAAKG,SAAS,CAACyC,UAAS,OAGpD5B,OAAS,WACT,IAAImC,EAAyC,QAA3BnD,EAAKC,MAAMmD,YAAwB,gBAAkB,GACnEC,EAA+C,cAA3BrD,EAAKC,MAAMmD,YAA8B,gBAAkB,GAC/EE,EAA4C,WAA3BtD,EAAKC,MAAMmD,YAA2B,gBAAkB,GAGzE,OACIlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACTrB,EAAKpB,MAAMgE,UAAY1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACrBrC,EAAAC,EAAAC,cAACoC,EAAD,CAAQ1F,MAAO,MACP4E,SAAUS,EACVV,UAAWzC,EAAK6C,mBAExB3B,EAAAC,EAAAC,cAACoC,EAAD,CAAQ1F,MAAO,YACP4E,SAAUW,EACVZ,UAAYzC,EAAK+C,yBAEzB7B,EAAAC,EAAAC,cAACoC,EAAD,CAAQ1F,MAAO,SACP4E,SAAUY,EACVb,UAAWzC,EAAKgD,wBAK1BhD,EAAKpB,MAAMgE,UAAY1B,EAAAC,EAAAC,cAAA,QAAMK,QAAS,WAAMzB,EAAKG,SAAS,CAACyC,UAAU,MAA9C,QACxB5C,EAAKpB,MAAMgE,UAAY1B,EAAAC,EAAAC,cAAA,QAAMK,QAAS,WAAMzB,EAAKG,SAAS,CAACyC,UAAU,MAA9C,uCAxCXjB,IAAMC,WC6DpB6B,6MAjEX7E,MAAmB,CACf8E,OAAO,EACP5F,MAAO,MAKX6F,eAAiB,WAEb,IAAIjG,EAAWsC,EAAKpB,MAAMd,MAC1BkC,EAAKG,SAAS,CAACrC,MAAM,KACL,KAAbJ,EACCsC,EAAKG,SAAS,CAACuD,OAAO,KAGtB1D,EAAKG,SAAS,CAACuD,OAAO,IACtB1D,EAAKC,MAAM2D,QAAQlG,OAK3BkD,eAAiB,SAACL,GACd,IAAI7C,EAAW6C,EAAEE,cAAcI,MAC/Bb,EAAKG,SAAS,CACVuD,OAAO,EACP5F,MAAOJ,OAEfmG,oBAAsB,SAACtD,GACN,UAAVA,EAAEuD,KACD9D,EAAK2D,0FAIb,IAAII,EAAiBC,KAAKpF,MAAM8E,MAAQ,QAAU,GAE9C,OAGQxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACIP,MAAOmD,KAAKpF,MAAMd,MAClBwD,SAAU0C,KAAKpD,eACfS,UAAW0C,EACXrF,KAAK,OACLuF,YAAY,gBACZC,WAAYF,KAAKH,sBACrB3C,EAAAC,EAAAC,cAAA,UAAQK,QAASuC,KAAKL,gBAAtB,eAhDShC,IAAMC,WCuDpBuC,6MAjDXvF,MAAQ,CACJmB,UAAU,EACVqE,aAAcpE,EAAKC,MAAMnC,SAG7BuG,WAAY,WAERrE,EAAKG,SAAS,CAACJ,UAAU,OAQ7BK,mBAAqB,WACjBJ,EAAKG,SAAS,CAACJ,UAAS,IACxBC,EAAKC,MAAMqE,cAActE,EAAKC,MAAM/B,WAAY8B,EAAKpB,MAAMwF,iBAY/DG,aAAe,SAAChE,GACZP,EAAKG,SAAS,CAACiE,aAAc7D,EAAEE,cAAcI,iFAG7C,OACIK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACMS,KAAKpF,MAAMmB,SAGjBmB,EAAAC,EAAAC,cAAA,SACII,OAAQwC,KAAK5D,mBACbmB,WAAW,EACXV,MAAOmD,KAAKpF,MAAMwF,aAClB9C,SAAU0C,KAAKO,eANnBrD,EAAAC,EAAAC,cAAA,MAAIK,QAASuC,KAAKK,WAAYhD,UAAU,0BAA0B2C,KAAK/D,MAAMnC,MAC7EoD,EAAAC,EAAAC,cAAA,UAAQK,QAASuC,KAAK/D,MAAMuE,gBAA5B,cAvCgB7C,IAAMC,WCiBnB6C,mLAZP,OACIvD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACIrC,EAAAC,EAAAC,cAACsD,EAAD,CAAe5G,MAAOkG,KAAK/D,MAAMnC,MAClB0G,eAAgBR,KAAK/D,MAAMuE,eAC3BtG,WAAY8F,KAAK/D,MAAM/B,WACvBoG,cAAeN,KAAK/D,MAAMqE,gBACzCpD,EAAAC,EAAAC,cAACuD,EAAD,CAAgBf,QAASI,KAAK/D,MAAM2D,kBARvBjC,IAAMC,WCE7BgD,6MAKFhG,MAAQ,CACJY,MAAO,GAOP4D,YAAa,SAwBjByB,aAAa,WAET7E,EAAKC,MAAM6E,eAAe9E,EAAKC,MAAMV,OAQzCiF,eAAiB,WACbxE,EAAKC,MAAM8E,iBAAiB/E,EAAKC,MAAMV,OAU3CyF,WAAa,SAAChH,EAAgB2B,GAG1B,IAAIsF,EAAcjF,EAAKC,MAAMT,MAAM0F,KAAK,SAAA/G,GAEpC,OAAOA,EAAKoB,KAAOvB,IAEnBG,EAAIc,OAAAC,EAAA,EAAAD,CAAA,GAAOgG,EAAP,GAAuBtF,GAE/BK,EAAKC,MAAMkF,aAAanF,EAAKC,MAAMV,GAAIvB,EAAQG,EAAMwB,MAKzDgB,aAAe,SAACxC,EAAcqC,GAC1BR,EAAKgF,WAAW7G,EAAM,CAACqC,cAG3BH,YAAc,SAAClC,EAAcT,GAEzBsC,EAAKgF,WAAW7G,EAAM,CAACL,MAAMJ,OAIjCoF,aAAe,SAACsC,GACZpF,EAAKG,SAAS,CAACiD,YAAagC,OAIhCC,QAAU,SAAC3H,GACPsC,EAAKC,MAAMqF,UAAU5H,EAAUsC,EAAKC,MAAMV,OAG9CyB,OAAS,WAAM,IAAAuE,EACQvF,EAAKC,MAAnBT,aADM,IAAA+F,EACE,GADFA,EAEX,OACIrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoE,EAAD,CAAgB5B,QAAS5D,EAAKqF,QACdvH,MAAOkC,EAAKC,MAAMnC,MAClB0G,eAAgBxE,EAAKwE,eACrBtG,WAAY8B,EAAKC,MAAMV,GACvB+E,cAAetE,EAAKC,MAAMqE,iBAI1CpD,EAAAC,EAAAC,cAACqE,EAAD,CACIpF,YAAaL,EAAKK,YAClBM,aAAcX,EAAKW,aACnBnB,MAAOA,EAAMI,OAAO,SAAAF,GAChB,MAA+B,QAA3BM,EAAKpB,MAAMwE,cAGgB,WAA3BpD,EAAKpB,MAAMwE,YACS,IAAb1D,EAAEc,OAEkB,cAA3BR,EAAKpB,MAAMwE,YACS,IAAb1D,EAAEc,YADb,KAIJtC,WAAY8B,EAAKC,MAAMV,KAC3B2B,EAAAC,EAAAC,cAACsE,EAAD,CACItC,YAAapD,EAAKpB,MAAMwE,YACxBN,aAAc9C,EAAK8C,qGAxHnCkB,KAAKa,sBAFUlD,IAAMC,WAsLd+D,EAHW7D,YAAqD,KAAM,CAChFrD,sBAAqBqG,eRGI,SAACnH,GAC3B,OAAO,SAACoE,GAAD,OACHtE,EAAaE,GACRqE,KAAK,SAAAC,GACF,IAAI2D,EAAW3D,EAAIC,KAAK2D,MACxB9D,EA9DQ,SAACvC,EAAwB7B,GAAzB,MAAqE,CAACe,KAhIrE,6BAgIsFf,aAAY6B,SA8DlGsG,CAASF,EAAUjI,QQRFoH,iBRqBV,SAAC7G,GAC7B,OAAM,SAAC6D,GACHtE,EAAmBS,GACd8D,KAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YAAkBJ,EAlFhB,SAAC7D,GAAD,MAAmD,CAACQ,KAhInD,mCAgI0ER,cAkFlDsG,CAAetG,QQzBViH,aRuChC,SAACjH,EAAoBF,EAAgBG,EAAcwB,GAE3E,OAAM,SAACoC,GACHtE,EAAYS,EAAYF,EAAQG,GAC3B6D,KAAK,SAAAC,GAEF,GAA2B,IAAxBA,EAAIC,KAAKC,WAAkB,CAC1B,IAAIhE,EAAO8D,EAAIC,KAAKA,KAAK6D,KACzBhE,EAzGM,SAACpC,EAAU3B,EAAgBE,GAA3B,MAAyE,CAACQ,KAhIzE,+BAgI4FiB,MAAK3B,SAASE,cAyGxG8G,CAAW7G,EAAMD,EAAYF,OAI7CgI,MAAO,SAACC,QQnDqDX,URwDjD,SAAC5H,EAAkBQ,GACxC,OAAM,SAAC6D,GACHtE,EAAeC,EAAUQ,GACpB8D,KAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACRJ,EAxHG,SAACtC,EAAmBvB,GAApB,MAA+D,CAACQ,KAAMJ,EAAUmB,UAASvB,cAwHnFmH,CAAQpD,EAAIC,KAAKA,KAAK6D,KAAM7H,QQ7D4BoG,cR0ExD,SAACpG,EAAoBR,GAC9C,OAAO,SAACqE,GACJtE,EAAwBS,EAAYR,GAC/BsE,KAAK,SAAAC,GAEuB,IAAtBA,EAAIC,KAAKC,YACRJ,EAAStD,EAAoBP,EAAYR,SQjFnCoE,CAC2E8C,GCxL/FsB,6MAEFtH,MAAQ,CACJJ,UAAW,MAQfqG,aAAe,WACX7E,EAAKC,MAAMkG,uBAIfC,YAAc,SAACtI,GACXkC,EAAKC,MAAMoG,cAAcvI,MAI7BkD,OAAS,WAEL,IAAInB,EAAWG,EAAKC,MAAMzB,UAAUa,IAAI,SAAAC,GAAE,OAAG4B,EAAAC,EAAAC,cAACkF,EAAD,CAAU/G,GAAID,EAAGC,GAAIzB,MAAOwB,EAAGxB,MAAO0B,MAAOF,EAAGE,UAE7F,OACI0B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACIrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuD,EAAD,CAAgBf,QAAS5D,EAAKoG,eAElClF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVxB,wFAxBbmE,KAAKa,sBAPKlD,IAAMC,WAiDT2E,EAJMzE,YAPG,SAAClD,GAErB,MAAO,CACHJ,UAAWI,EAAMiB,SAASrB,YAK9B,CACA6H,cTqJyB,SAACvI,GAC1B,OAAM,SAACiE,GACHtE,EAAmBK,GACdkE,KAAK,SAAAC,GACF,IAAIpC,EAAWoC,EAAIC,KAAKA,KAAK6D,KAC7BhE,EA7EkE,CAACrD,KAhIvD,gCAgI2EU,YA6ElES,QS1JlBsG,kBTsKc,WAC7B,OAAM,SAACpE,GACHtE,IACKuE,KAAK,SAAAC,GAEFF,EAzFuE,CAACrD,KAhI5D,gCAgIgFF,UAyFvEyD,EAAIC,YS7KpBJ,CAEkBoE,GC7CnBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECXAC,EAAcC,YAAgB,CAACjH,SAAUlB,IAOhCoI,EADDC,YAAYH,EAAaI,YAAgBC,MCLvDC,IAASnG,OACLE,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAUL,MAAOA,GACjB7F,EAAAC,EAAAC,cAACiG,EAAD,CAAK7I,UAAW,MAEd8I,SAASC,eAAe,SFqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,KAAK,SAAA2F,GACjCA,EAAaC","file":"static/js/main.a6aac2fa.chunk.js","sourcesContent":["import  axios from \"axios\";\r\nimport {ChangeTaskType, TaskType, TodoListType} from \"./types/entities\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists/\",\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '0c05e3f5-1bb0-4c63-a612-ce4b6957f3bd'}\r\n});\r\n\r\n\r\nexport const api = {\r\n    createTask(newTitle: string, todolistId: string){\r\n     return instance.post(`${todolistId}/tasks`, {title:newTitle})\r\n },\r\n\r\n    createTodolist(title: string){\r\n        return instance.post('', {title: title})\r\n    },\r\n\r\n    getTodolists(){\r\n\r\n        return instance.get<TodoListType[]>('')\r\n    },\r\n\r\n    getTasks(taskId: string){\r\n    return instance.get<GetTasksResponseType>(`${taskId}/tasks`)\r\n    },\r\n\r\n    deleteTodolist(todolistId: string){\r\n     return instance.delete(`${todolistId}`)\r\n },\r\n\r\n    putTask(todoListId: string, taskId: string, task: object){\r\ndebugger\r\n     return  instance.put(`${todoListId}/tasks/${taskId}`, task)\r\n },\r\n\r\n    deleteTask(todolistId: string, taskId: string){\r\n     return  instance.delete(`${todolistId}/tasks/${taskId}`)\r\n },\r\n\r\n changeTodolistTitle (todoListId: string, updateTitle: string){\r\n\r\n        return instance.put(`${todoListId}`, {title: updateTitle})\r\n }\r\n\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n","\r\nimport {api} from \"./api\";\r\nimport {ChangeTaskType, TaskType, TodoListType} from \"./types/entities\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\nexport const ADD_TODOLIST = 'TodoList/Reducer/ADD-TODOLIST';\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = 'TodoList/Reducer/CHANGE-TASK';\r\nexport const DELETE_TODOLIST = 'TodoList/Reducer/DELETE-TODOLIST';\r\nexport const DELETE_TASK = 'TodoList/Reducer/DELETE-TASK';\r\nexport const SET_TODOLIST = 'TodoList/Reducer/SET-TODOLIST';\r\nexport const SET_TASKS = 'TodoList/Reducer/SET-TASKS';\r\nexport const CHANGE_TITLE_TODOLIST = 'TodoList/Reducer/CHANGE-TITLE-TODOLIST';\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [\r\n        // {id: 0, title: 'ddddd', tasks: [{id:0, title:\"ONe\", isDone: false, priority: 'low'}]},\r\n        // {id: 1, title: 'sssss', tasks: [{id:1, title:\"Two\", isDone: true, priority: 'low'}]},\r\n        // {id: 2, title: 'sssss', tasks: []}\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action: TodoActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            }\r\n\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(\r\n                    tl => {\r\n                        if (tl.id === action.todoListId) {\r\n                            return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    })\r\n            }\r\n\r\n        case CHANGE_TASK:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                todolists:\r\n                    state.todolists.map(tl => {\r\n                        if (tl.id === action.todoListId) {\r\n                            return {\r\n                                ...tl, tasks: tl.tasks.map(t => {\r\n                                    if (t.id !== action.taskId) {\r\n                                        debugger\r\n                                        return t\r\n                                    } else {\r\n                                        debugger\r\n                                        return {...t, ...action.obj}\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    })\r\n            }\r\n \r\n        case CHANGE_TITLE_TODOLIST:\r\n            return {\r\n                ...state, todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {\r\n                            ...t, title: action.newTitle\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todoListId)\r\n            }\r\n\r\n        case DELETE_TASK:\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id !== action.todoListId) {\r\n                            return tl\r\n                        } else {\r\n                            return {\r\n                                ...tl, tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n\r\n        case SET_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(todolist => ({...todolist, tasks: []}))\r\n            }\r\n        }\r\n\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return state\r\n}\r\n\r\n\r\n\r\nexport const addTodolist = (newTodolist: TodoListType): AddTodolistActionType => ({type: ADD_TODOLIST, newTodolist})\r\nexport const addTask = (newTask: TaskType, todoListId: string): AddTaskActionType => ({type: ADD_TASK, newTask, todoListId})\r\nexport const changeTask = (obj: any, taskId: string, todoListId: string): ChangeTaskActionType => ({type: CHANGE_TASK, obj, taskId,  todoListId})\r\nexport const deleteTodolist = (todoListId: string): DeleteTodoListActionType => ({type: DELETE_TODOLIST, todoListId})\r\nexport const deleteTask = (taskId: string, todoListId: string): DeleteTaskActionType => ({type: DELETE_TASK, taskId, todoListId})\r\nexport const getTodoList = (todolists: Array<TodoListType>): SetTodoListActionType => ({type: SET_TODOLIST, todolists})\r\nexport const getTasks = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => ({type: SET_TASKS, todolistId, tasks})\r\nexport const changeTitleTodolist = (todolistId: string, newTitle: string): ChangeTitleTodolistActionType => ({type: CHANGE_TITLE_TODOLIST, todolistId, newTitle})\r\n\r\n//Action creators type\r\n\r\ntype AddTodolistActionType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: TodoListType\r\n}\r\ntype AddTaskActionType = {\r\n    type: typeof ADD_TASK\r\n    newTask: TaskType\r\n    todoListId: string\r\n}\r\ntype ChangeTaskActionType = {\r\n    type: typeof CHANGE_TASK\r\n    obj: any\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype DeleteTodoListActionType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todoListId: string\r\n}\r\ntype DeleteTaskActionType = {\r\n    type: typeof DELETE_TASK\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype SetTodoListActionType = {\r\n    type: typeof SET_TODOLIST\r\n    todolists: Array<TodoListType>\r\n}\r\ntype SetTasksActionType = {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\ntype ChangeTitleTodolistActionType = {\r\n    type: typeof CHANGE_TITLE_TODOLIST\r\n    todolistId: string\r\n    newTitle: string\r\n}\r\n\r\ntype TodoActionType =\r\n    AddTodolistActionType | AddTaskActionType |\r\n    ChangeTaskActionType | DeleteTodoListActionType |\r\n    DeleteTaskActionType | SetTodoListActionType |\r\n    SetTasksActionType | ChangeTitleTodolistActionType\r\n//______________________________________\r\ntype InitialStateType = {\r\n    todolists: Array<TodoListType>\r\n}\r\ntype ThunkType = ThunkAction<void, InitialStateType, unknown, TodoActionType >\r\n\r\n//Thunk\r\n\r\nexport const loadTasksThunk = (todolistId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType>=>{\r\n    return (dispatch: any)=> (\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items\r\n                dispatch(getTasks(allTasks, todolistId))\r\n            })\r\n    )\r\n}\r\nexport const addTodolistTC = (title: string): ThunkType =>{\r\n    return(dispatch: any)=>{\r\n        api.createTodolist(title)\r\n            .then(res=> {\r\n                let todolist = res.data.data.item;\r\n                dispatch(addTodolist(todolist))\r\n            })\r\n    }\r\n}\r\nexport const deleteTodolistTC = (todoListId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n    return(dispatch )=>{\r\n        api.deleteTodolist(todoListId)\r\n            .then(res=>{\r\n                if(res.data.resultCode === 0) dispatch(deleteTodolist(todoListId));\r\n            })\r\n    }\r\n}\r\nexport const restoreTodolistTC = (): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n    return(dispatch: any)=>{\r\n        api.getTodolists()\r\n            .then(res => {\r\n\r\n                dispatch(getTodoList(res.data))\r\n            });\r\n    }\r\n}\r\n                                                               // task string\r\nexport const changeTaskTC = (todoListId: string, taskId: string, task: object, obj: any): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n   debugger\r\n    return(dispatch)=>{\r\n        api.putTask(todoListId, taskId, task)\r\n            .then(res=>{\r\ndebugger\r\n                if(res.data.resultCode === 0) {\r\n                    let task = res.data.data.item;\r\n                    dispatch(changeTask(task ,todoListId, taskId ));\r\n\r\n                };\r\n            })\r\n            .catch( (err)=> {\r\n                debugger\r\n            } )\r\n    }\r\n}\r\nexport const addTaskTC = (newTitle: string, todoListId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n    return(dispatch: any)=>{\r\n        api.createTask(newTitle, todoListId)\r\n            .then(res=>{\r\n                if(res.data.resultCode === 0)\r\n                    dispatch(addTask(res.data.data.item, todoListId));\r\n            })\r\n    }\r\n}\r\nexport const deleteTaskTC = (todoListId: string, taskId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n    return(dispatch: any)=>{\r\n        api.deleteTask(todoListId, taskId)\r\n            .then(res=>{\r\n                if(res.data.resultCode === 0)\r\n                    dispatch(deleteTask(taskId, todoListId))\r\n            })\r\n}\r\n}\r\nexport const changeTitleTC = (todoListId: string, newTitle: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> =>{\r\n    return (dispatch: any)=>{\r\n        api.changeTodolistTitle(todoListId, newTitle)\r\n            .then(res=>{\r\n\r\n                if(res.data.resultCode===0){\r\n                    dispatch(changeTitleTodolist(todoListId, newTitle))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\n// export const addTodolistAC = (newTodolist) => ({type: ADD_TODOLIST, newTodolist})\r\n// export const addTaskAC = (newTask, todoListId) => {\r\n//     return {\r\n//         type: ADD_TASK,\r\n//         newTask: newTask,\r\n//         todoListId: todoListId\r\n//     }\r\n// }\r\n// export const changeTaskAC = (task) => {\r\n//     return {\r\n//         type: CHANGE_TASK,\r\n//         task\r\n//     }\r\n// }\r\n// export const deleteTodolistAC = (todoListId) => {\r\n//     return {\r\n//         type: DELETE_TODOLIST,\r\n//         todoListId: todoListId\r\n//     }\r\n// }\r\n// export const deleteTaskAC = (taskId, todoListId) => {\r\n//     return {\r\n//         type: DELETE_TASK,\r\n//         taskId: taskId,\r\n//         todoListId: todoListId\r\n//     }\r\n// }\r\n// export const setTodoListAC = (todolists) => {\r\n//     return {\r\n//         type: SET_TODOLIST,\r\n//         todolists: todolists\r\n//     }\r\n// }\r\n// export const setTasksAC = (tasks, todolistId) => {\r\n//     return {\r\n//         type: SET_TASKS,\r\n//         todolistId: todolistId,\r\n//         tasks: tasks\r\n//     }\r\n// }\r\n// export const changeTitleTodolistAC = (todolistId, newTitle) => ({type: CHANGE_TITLE_TODOLIST, todolistId, newTitle})","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {DELETE_TASK, deleteTask, deleteTaskTC} from \"./reducer\";\nimport {TaskType, TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\n\ntype StateType = {\n    editMode: boolean\n    title: string\n}\ntype OwnPropsType = {\n    task: TaskType\n    title: string\n    isDone: number //string\n    priority: string\n    changeStatus:(task: string, status: number)=>void\n    changeTitle: (taskId: string, checked: string) => void\n    todoListId: string\n}\n\n\nclass TodoListTask extends React.Component <PropsType, StateType> {\n    state: StateType = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    }\n    deactivateEditMode = () => {\n        this.setState({editMode: false})\n        this.props.changeTitle(this.props.task.id, this.state.title)\n    }\n\n    onIsDoneChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        debugger\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status)\n        // alert(e.currentTarget.checked);\n    };\n    onTitleChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n        //  this.props.changeTitle(this.props.task.id, e.currentTarget.value)\n    };\n    deleteTask = () => {\n        this.props.deleteTaskTC(this.props.todoListId, this.props.task.id)\n        // axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.todoListId}/tasks/${this.props.task.id}`,\n        //     {withCredentials: true, headers: {'API-KEY': '0c05e3f5-1bb0-4c63-a612-ce4b6957f3bd'}})\n\n\n        //     api.deleteTask(this.props.todoListId, this.props.task.id)\n        //     .then(res=>{\n        //         if(res.data.resultCode === 0) this.props.deleteTask(this.props.task.id, this.props.todoListId)})\n\n    }\n    render = () => {\n        let classForTask = (this.props.task.status === 2)\n            ? \"todoList-task done\"\n            : \"todoList-task\";\n        return (\n            <div className=\"todoList-tasks\">\n                <div className={classForTask}>\n                    <input type=\"checkbox\"\n                           checked={this.props.task.status === 2 ? true : false}\n                           onChange={this.onIsDoneChanged}\n                    />\n                    {this.state.editMode ? <input value={this.state.title}\n                                                  autoFocus={true}\n                                                  onChange={this.onTitleChanged}\n                                                  onBlur={this.deactivateEditMode}/> :\n                        <span onClick={this.activateEditMode}>\n                          {this.props.task.title} {this.props.priority}\n                    </span>\n                    }\n                    <button onClick={this.deleteTask}>X</button>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype MapStateToPropsType = {\n    todolists: TodoListType[]\n\n}\ntype MapDispatchPropsType = {\n    deleteTaskTC: (todolistId: string, taskId: string)=>void\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n\n    return {\n        todolists: state.todolist.todolists\n    }\n};\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStateToPropsType\n\n\nconst connectedTodoListTask = connect(mapStateToProps, {deleteTaskTC})(TodoListTask)\n\nexport default connectedTodoListTask;\n\n","import React from 'react';\nimport './TodoListTask'\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entities\";\n\ntype OwnPropsType = {\n    tasks: TaskType[]\n    changeStatus: (task: string, status: number)=>void\n    changeTitle: (taskId: string, checked: string)=>void\n    todoListId: string\n\n}\n\nclass TodoListTasks extends React.Component<OwnPropsType> {\n\n\n    render = () => {\n\n        let tasksEls = this.props.tasks.map((t) => {\n            return <TodoListTask task={t}\n                                 title={t.title}\n                                 isDone={t.status}\n                                 priority={t.priority}\n                                 changeStatus={this.props.changeStatus}\n                                 changeTitle={this.props.changeTitle}\n                                 todoListId={this.props.todoListId}\n\n                    />\n        });\n\n\n        return (\n            <div className=\"todoList-tasks\">\n\n                {tasksEls}\n\n                {/* <TodoListTask title={this.props.tasks[0].title} isDone={this.props.tasks[0].isDone}/>\n                <TodoListTask title={this.props.tasks[1].title} isDone={this.props.tasks[1].isDone}/>\n                <TodoListTask title={this.props.tasks[2].title} isDone={this.props.tasks[2].isDone}/>\n                <TodoListTask title={this.props.tasks[3].title} isDone={this.props.tasks[3].isDone}/>\n                */}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\n\n\n\nclass Button extends React.Component <OwnPropsType> {\n\n    render = () => {\n        return (\n\n                <button onClick={this.props.onClickFn}\n                        className={this.props.btnClass}>\n                    {this.props.title}\n                </button>\n\n\n        );\n    }\n}\n\n\nexport default Button;\ntype OwnPropsType={\n    onClickFn: ()=>void\n    btnClass: string\n    title: string\n}\n","import React from 'react';\nimport Button from \"./Button\";\n\ntype StateType = {\n    isHidden: boolean\n}\ntype OwnPropsType = {\n    changeFilter: (incoming:string)=>void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<OwnPropsType>  {\n\n\n\n    state: StateType = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {this.props.changeFilter('All')};\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.changeFilter('Active')};\n    onShowFiltersClick = () => {this.setState({isHidden:true})};\n    onHideFiltersClick = () => {this.setState({isHidden:false})};\n\n\n    render = () => {\n    let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n    let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n    let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <>\n                    <Button title={'All'}\n                            btnClass={classForAll}\n                            onClickFn={this.onAllFilterClick}\n                    />\n                    <Button title={'Completed'}\n                            btnClass={classForCompleted}\n                            onClickFn={ this.onCompletedFilterClick}\n                    />\n                    <Button title={'Active'}\n                            btnClass={classForActive}\n                            onClickFn={this.onActiveFilterClick}\n                    />\n                </>}\n\n\n                {!this.state.isHidden && <span onClick={() =>{this.setState({isHidden: true})}}>Hide</span>}\n                {this.state.isHidden && <span onClick={() =>{this.setState({isHidden: false})}}>Show</span>}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport TodoListTitle from \"./TodoListTitle\";\n\n\n\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\n\n    state: StateType = {\n        error: false,\n        title: ''\n    };\n\n\n\n    onAddItemClick = () => {\n       // let newTitle = this.newTaskTitleRef.current.value;\n        let newTitle = this.state.title;\n        this.setState({title:''})\n        if(newTitle === ''){\n            this.setState({error: true})\n        }\n        else{\n            this.setState({error: false})\n            this.props.addItem(newTitle);\n        }\n\n\n    };\n    onTitleChanged = (e: React.FormEvent<HTMLInputElement>) =>{\n        let newTitle = e.currentTarget.value;\n        this.setState({\n            error: false,\n            title: newTitle})\n    };\n    onAddItemEnterPress = (e: any) =>{\n        if(e.key === 'Enter'){\n            this.onAddItemClick();\n        }\n    }\n    render() {\n    let classForInput = (this.state.error)? 'error' : '';\n\n        return (\n\n\n                <div className=\"NewItemForm\">\n                    <input\n                        value={this.state.title}\n                        onChange={this.onTitleChanged}\n                        className={classForInput}\n                        type=\"text\"\n                        placeholder=\"New Item name\"\n                        onKeyPress={this.onAddItemEnterPress}/>\n                    <button onClick={this.onAddItemClick}>Add</button>\n                </div>\n\n\n        );\n\n    }\n}\n\n\ntype StateType = {\n    error: boolean\n    title: string\n}\ntype OwnPropsType = {\n    addItem: (newTitle: string)=>void\n}\n\n\nexport default AddNewItemForm;","import React from 'react'\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n    todoListId: string\r\n    changeTitleTC: (todoListId: string, currentTitle: string)=>void\r\n    deleteTodolist: ()=>void\r\n}\r\n\r\nclass TodoListTitle extends React.Component <OwnPropsType>{\r\n\r\n    state = {\r\n        editMode: false,\r\n        currentTitle: this.props.title\r\n    }\r\n\r\n    activeMode =() =>{\r\n\r\n        this.setState({editMode: true})\r\n\r\n    }\r\n\r\n// .then(res=>{\r\n//     if(res.data.resultCode === 0) {\r\n//     let task = res.data.data.item;\r\n//     this.props.changeTask(task);\r\n    deactivateEditMode = ()=>{\r\n        this.setState({editMode:false})\r\n        this.props.changeTitleTC(this.props.todoListId, this.state.currentTitle)\r\n\r\n        // api.changeTodolistTitle(this.props.todoListId, this.state.currentTitle)\r\n        //     .then(res=>{\r\n        //         debugger\r\n        //         if(res.data.resultCode===0){\r\n        //             this.props.changeTitleTodolist(this.props.todoListId, this.state.currentTitle) //     let task = res.data.data.item; //this.state.currentTitle\r\n        //         }\r\n        //     })\r\n\r\n\r\n    }\r\n    titleChanged = (e: React.FormEvent<HTMLInputElement>) =>{\r\n        this.setState({currentTitle: e.currentTarget.value})\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n               { !this.state.editMode?\r\n            <h3 onClick={this.activeMode} className=\"todoList-header__title\">{this.props.title}\r\n            <button onClick={this.props.deleteTodolist}>X</button></h3>:\r\n            <input\r\n                onBlur={this.deactivateEditMode}\r\n                autoFocus={true}\r\n                value={this.state.currentTitle}\r\n                onChange={this.titleChanged}\r\n            />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle","import React from 'react'\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n    deleteTodolist: ()=>void\r\n    todoListId: string\r\n    changeTitleTC: (todoListId: string, newTitle: string)=>void\r\n    addItem: (newTitle: string)=>void\r\n}\r\n\r\nclass TodoListHeader extends React.Component<OwnPropsType> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <TodoListTitle title={this.props.title}\r\n                               deleteTodolist={this.props.deleteTodolist}\r\n                               todoListId={this.props.todoListId}\r\n                               changeTitleTC={this.props.changeTitleTC}/>\r\n                <AddNewItemForm addItem={this.props.addItem}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListHeader","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListHeader from \"./TodoListHeader\";\nimport {connect} from \"react-redux\";\nimport {\n     addTaskTC, changeTaskTC, changeTitleTC,\n    changeTitleTodolist, deleteTodolistTC, loadTasksThunk,\n} from \"./reducer\";\n\nimport { TaskType} from \"./types/entities\";\n\n\nclass TodoList extends React.Component<PropsType, StateType> {\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        tasks: [\n            // {id: 0, title: 'CSS', isDone: true, priority: 'high'},\n            // {id: 1,title: 'JS', isDone: true, priority: 'low'},\n            // {id: 2,title: 'HTML', isDone: false, priority: 'high'},\n            // {id: 3,title: 'React', isDone: false, priority: 'low'},\n            // {id: 4,title: 'Angular', isDone: true, priority: 'high'},\n        ],\n        filterValue: 'All'\n    };\n\n    // saveState = () => {\n    //     let stateAsString = JSON.stringify(this.state)\n    //     localStorage.setItem(`our-state - ${this.props.id}`, stateAsString)\n    // }\n\n    // _restoreState = () => {\n    //     let state = this.state\n    //     let stateAsString = localStorage.getItem(`our-state - ${this.props.id}`);\n    //     if (stateAsString) {\n    //         state = JSON.parse(stateAsString)\n    //     }\n    //     // callback add correct id\n    //     //setState ассинхронный\n    //     this.setState(state, () => {\n    //         this.state.tasks.forEach(t => {\n    //             if (t.id > this.nextTaskId) {\n    //                 this.nextTaskId = t.id + 1;\n    //             }\n    //         })\n    //     })\n    // }\n    restoreState=()=> {\n\n        this.props.loadTasksThunk(this.props.id)\n        // api.getTasks(this.props.id)\n        //     .then(res => {\n        //         let allTasks = res.data.items;\n        //         this.props.getTasks(allTasks, this.props.id)\n        //     })\n    }\n\n    deleteTodolist = ()=>{\n        this.props.deleteTodolistTC(this.props.id)\n        // api.deleteTodolist(this.props.id)\n        //     .then(res=>{\n        //\n        //         if(res.data.resultCode === 0) this.props.deleteTodolist(this.props.id);\n        //     })\n    }\n\n\n\n    changeTask = (taskId: string, obj: object) => {\n\n\n        let changedTask = this.props.tasks.find(task => {\n\n            return task.id === taskId\n        });\n        let task = {...changedTask, ...obj};\n\n        this.props.changeTaskTC(this.props.id, taskId, task, obj);\n\n    }\n\n\n    changeStatus = (task: string, status: number) => {\n        this.changeTask(task, {status}) //{status: status}\n    };\n\n    changeTitle = (task: string, newTitle: string) => {\n\n        this.changeTask(task, {title:newTitle})\n\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState({filterValue: newFilterValue})\n    };\n\n\n    addTask = (newTitle: string) => {\n        this.props.addTaskTC(newTitle, this.props.id)\n\n    };\n    render = () => {\n        let {tasks = []} = this.props\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <div>\n                    <TodoListHeader addItem={this.addTask}\n                                    title={this.props.title}\n                                    deleteTodolist={this.deleteTodolist}\n                                    todoListId={this.props.id}\n                                    changeTitleTC={this.props.changeTitleTC}\n                                    //changeTitleTodolist={this.props.changeTitleTodolist}\n                        />\n                    </div>\n                    <TodoListTasks\n                        changeTitle={this.changeTitle}\n                        changeStatus={this.changeStatus}\n                        tasks={tasks.filter(t => {\n                            if (this.state.filterValue === 'All') {\n                                return true;\n                            }\n                            if (this.state.filterValue === 'Active') {\n                                return t.status === 0;\n                            }\n                            if (this.state.filterValue === 'Completed') {\n                                return t.status === 2;\n                            }\n                        })}\n                        todoListId={this.props.id}/>\n                    <TodoListFooter\n                        filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                </div>\n            </div>\n\n        );\n    }\n}\n// const mapDispatchToProps = (dispatch)=> {\n//     return {\n//         addTask: (newTask, todoListId) => {\n//\n//             dispatch(addTaskAC(newTask, todoListId))\n//         },\n//\n//         changeTask: (task)=>{\n//\n//             dispatch(changeTask(task))\n//         },\n//\n//         deleteTodoList: (todoListId)=>{\n//\n//             dispatch(deleteTodolist(todoListId))\n//         },\n//         getTasks: ( tasks, todolistId)=>{\n//             dispatch(getTasks(tasks, todolistId))\n//         },\n//        changeTitleTodolist: (todolistId, newTitle)=>{\n//             debugger\n//             dispatch(changeTitleTodolistAC(todolistId, newTitle))\n//        }\n//     }\n// }\ntype StateType = {\n    tasks: TaskType[]\n    filterValue: string\n}\ntype MapDispatchToPropsType = {\n\n    loadTasksThunk: (todlilistId: string)=>void\n    deleteTodolistTC: (todlilistId: string)=>void\n    addTaskTC: (newTitle: string, todolistId: string)=>void\n    changeTitleTodolist: (todoListId: string, newTitle: string)=>void // delete\n    changeTitleTC: (todoListId: string, newTitle: string)=>void\n    changeTaskTC: (todoListId: string, taskId: string, task: object, obj: object)=>void\n}\n\n\ntype OwnPropsType = {\n\n    id: string\n    title: string\n    tasks: TaskType[]\n}\ntype PropsType = MapDispatchToPropsType  & OwnPropsType\n\n\nconst ConnectedTodoList = connect<null, MapDispatchToPropsType,  OwnPropsType>(null, {\n     changeTitleTodolist, loadTasksThunk, deleteTodolistTC, changeTaskTC, addTaskTC, changeTitleTC})(TodoList)\n\nexport default ConnectedTodoList;\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolistTC, restoreTodolistTC} from \"./reducer\";\nimport { TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\n\n\nclass App extends React.Component<PropsType & StateType> {\n\n    state = {\n        todolists: []\n    }\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n\n    restoreState = () => {\n        this.props.restoreTodolistTC()\n    }\n\n\n    addTodolist = (title: string) =>{\n        this.props.addTodolistTC(title)\n    }\n\n\n    render = () => {\n\n        let todolist = this.props.todolists.map(tl =><TodoList id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodolist}/>\n                </div>\n                <div className=\"App\">\n                    {todolist}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType =>{\n\n    return {\n        todolists: state.todolist.todolists\n    }\n}\n\nconst ConnectedApp = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps,\n    {\n    addTodolistTC, restoreTodolistTC})(App);\n\nexport default ConnectedApp;\n\ntype StateType = {\n    todolists: TodoListType[]\n}\ntype OwnPropsType = {\n    todolists: TodoListType[]\n}\ntype MapStateToPropsType = {\n    todolists: TodoListType[]\n}\ntype MapDispatchToPropsType = {\n    addTodolistTC: (title: string) => void\n    restoreTodolistTC: () => void\n}\n\ntype PropsType = OwnPropsType & MapDispatchToPropsType & MapStateToPropsType\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//import React from 'react';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({todolist: reducer})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App todolists={[]}/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}