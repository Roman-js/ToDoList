{"version":3,"sources":["api.ts","reducer.ts","Login.tsx","TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","AddNewItemForm.tsx","TodoListTitle.tsx","TodoListHeader.tsx","TodoList.tsx","Root.tsx","App.tsx","serviceWorker.js","store.ts","index.tsx","TodoList.module.css"],"names":["instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","email","password","post","then","response","data","newTitle","todolistId","concat","title","get","taskId","delete","todoListId","task","put","updateTitle","ADD_TASK","initialState","todolists","auth","changeTitleTodolist","type","reducer","state","arguments","length","undefined","action","Object","objectSpread2","toConsumableArray","newTodolist","map","tl","id","tasks","newTask","t","filter","todolist","connect","authorizeTC","dispatch","res","resultCode","props","_useState","useState","_useState2","slicedToArray","setEmail","_useState3","_useState4","setPassword","react_default","a","createElement","Container","fixed","maxWidth","style","height","Grid","container","justify","alignItems","width","Paper","elevation","padding","minWidth","TextField","placeholder","value","onChange","e","currentTarget","Button","variant","color","onClick","TodoListTask","editMode","_this","activateEditMode","setState","deactivateEditMode","changeTitle","onIsDoneChanged","status","checked","changeStatus","onTitleChanged","deleteTask","deleteTaskTC","render","classForTask","className","Checkbox","autoFocus","onBlur","IconButton","Delete","React","Component","connectedTodoListTask","TodoListTasks","tasksEls","src_TodoListTask","isDone","priority","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","Fragment","filterValue","AddNewItemForm","error","onAddItemClick","addItem","onAddItemEnterPress","this","helperText","onKeyPress","AddBox","TodoListTitle","currentTitle","activeMode","changeTitleTC","titleChanged","deleteTodolist","TodoListHeader","src_TodoListTitle","src_AddNewItemForm","TodoList","restoreState","loadTasksThunk","deleteTodolistTC","changeTask","obj","changedTask","find","changeTaskTC","newFilterValue","addTask","addTaskTC","_this$props$tasks","item","margin","src_TodoListHeader","src_TodoListTasks","src_TodoListFooter","ConnectedTodoList","allTasks","items","getTasks","catch","err","App","login","restoreTodolistTC","addTodolist","addTodolistTC","src_TodoList","AppBar","position","Toolbar","edge","Menu","Typography","spacing","ConnectedRoot","console","log","useSelector","react_router","path","component","Login","to","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","react_router_dom","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","buttonOfDelete"],"mappings":"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","file":"static/js/main.b1f9bfa9.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {TaskType, TodoListType} from \"./types/entities\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'e203b3f5-d0bb-401b-85c2-cf8ebe7c290c'}\r\n});\r\n\r\n\r\nexport const api = {\r\n    login(email: string, password: string){\r\n        return instance.post(`auth/login`, {email, password})\r\n            .then(response=> {\r\n                    return response.data})\r\n    },\r\n    createTask(newTitle: string, todolistId: string){\r\n     return instance.post(`todo-lists/${todolistId}/tasks`, {title:newTitle})\r\n    },\r\n\r\n    createTodolist(title: string){\r\n        return instance.post('todo-lists/', {title: title})\r\n    },\r\n\r\n    getTodolists(){\r\n\r\n        return instance.get<TodoListType[]>('todo-lists/')\r\n    },\r\n\r\n    getTasks(taskId: string){\r\n    return instance.get<GetTasksResponseType>(`todo-lists/${taskId}/tasks`)\r\n    },\r\n\r\n    deleteTodolist(todolistId: string){\r\n     return instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    putTask(todoListId: string, taskId: string, task: object){\r\n     return  instance.put(`todo-lists/${todoListId}/tasks/${taskId}`, task)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string){\r\n     return  instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    changeTodolistTitle (todoListId: string, updateTitle: string){\r\n\r\n        return instance.put(`todo-lists/${todoListId}`, {title: updateTitle})\r\n   }\r\n\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n","import {api} from \"./api\";\r\nimport {TaskType, TodoListType} from \"./types/entities\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nexport const ADD_TODOLIST = 'TodoList/Reducer/ADD-TODOLIST';\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = 'TodoList/Reducer/CHANGE-TASK';\r\nexport const DELETE_TODOLIST = 'TodoList/Reducer/DELETE-TODOLIST';\r\nexport const DELETE_TASK = 'TodoList/Reducer/DELETE-TASK';\r\nexport const SET_TODOLIST = 'TodoList/Reducer/SET-TODOLIST';\r\nexport const SET_TASKS = 'TodoList/Reducer/SET-TASKS';\r\nexport const CHANGE_TITLE_TODOLIST = 'TodoList/Reducer/CHANGE-TITLE-TODOLIST';\r\nexport const AUTHORIZED = 'TodoList/Reducer/AUTHORIZED';\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [],\r\n    auth: false\r\n}\r\n\r\nconst reducer = (state = initialState, action: TodoActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(\r\n                    tl => {\r\n                        if (tl.id === action.todoListId) {\r\n                            return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    })\r\n            }\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists:\r\n                    state.todolists.map(tl => {\r\n                        if (tl.id === action.task.todoListId) {\r\n                            return {\r\n                                ...tl, tasks: tl.tasks.map(t => {\r\n                                    if (t.id !== action.task.id) {\r\n                                        return t\r\n                                    } else {\r\n                                        return {...t, ...action.task}\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    })\r\n            }\r\n        case CHANGE_TITLE_TODOLIST:\r\n            return {\r\n                ...state, todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {\r\n                            ...t, title: action.newTitle\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todoListId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id !== action.todoListId) {\r\n                            return tl\r\n                        } else {\r\n                            return {\r\n                                ...tl, tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        case SET_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(todolist => ({...todolist, tasks: []}))\r\n            }\r\n        }\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n        case AUTHORIZED: {\r\n            return {\r\n                ...state, auth: action.auth\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return state\r\n}\r\n\r\n\r\nexport const addTodolist = (newTodolist: TodoListType): AddTodolistActionType => ({type: ADD_TODOLIST, newTodolist})\r\nexport const addTask = (newTask: TaskType, todoListId: string): AddTaskActionType => ({\r\n    type: ADD_TASK,\r\n    newTask,\r\n    todoListId\r\n})\r\nexport const changeTask = (task: TaskType, taskId: string, todoListId: string): ChangeTaskActionType => ({\r\n    type: CHANGE_TASK,\r\n    task,\r\n    taskId,\r\n    todoListId\r\n})\r\nexport const deleteTodolist = (todoListId: string): DeleteTodoListActionType => ({type: DELETE_TODOLIST, todoListId})\r\nexport const deleteTask = (taskId: string, todoListId: string): DeleteTaskActionType => ({\r\n    type: DELETE_TASK,\r\n    taskId,\r\n    todoListId\r\n})\r\nexport const getTodoList = (todolists: Array<TodoListType>): SetTodoListActionType => ({type: SET_TODOLIST, todolists})\r\nexport const getTasks = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => ({\r\n    type: SET_TASKS,\r\n    todolistId,\r\n    tasks\r\n})\r\nexport const changeTitleTodolist = (todolistId: string, newTitle: string): ChangeTitleTodolistActionType => ({\r\n    type: CHANGE_TITLE_TODOLIST,\r\n    todolistId,\r\n    newTitle\r\n})\r\nexport const approveAuth = (auth: boolean) =>({\r\n    type: AUTHORIZED,\r\n    auth\r\n})\r\n\r\n//Action creators type\r\n\r\ntype AddTodolistActionType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: TodoListType\r\n}\r\ntype AddTaskActionType = {\r\n    type: typeof ADD_TASK\r\n    newTask: TaskType\r\n    todoListId: string\r\n}\r\ntype ChangeTaskActionType = {\r\n    type: typeof CHANGE_TASK\r\n    task: TaskType\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype DeleteTodoListActionType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todoListId: string\r\n}\r\ntype DeleteTaskActionType = {\r\n    type: typeof DELETE_TASK\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype SetTodoListActionType = {\r\n    type: typeof SET_TODOLIST\r\n    todolists: Array<TodoListType>\r\n}\r\ntype SetTasksActionType = {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\ntype ChangeTitleTodolistActionType = {\r\n    type: typeof CHANGE_TITLE_TODOLIST\r\n    todolistId: string\r\n    newTitle: string\r\n}\r\ntype AuthorizedType = {\r\n    type: typeof AUTHORIZED\r\n    auth: boolean\r\n\r\n}\r\n\r\ntype TodoActionType =\r\n    AddTodolistActionType | AddTaskActionType |\r\n    ChangeTaskActionType | DeleteTodoListActionType |\r\n    DeleteTaskActionType | SetTodoListActionType |\r\n    SetTasksActionType | ChangeTitleTodolistActionType |\r\n    AuthorizedType\r\n\r\n//______________________________________\r\ntype InitialStateType = {\r\n    todolists: Array<TodoListType>\r\n    auth: boolean\r\n}\r\ntype ThunkType = ThunkAction<void, InitialStateType, unknown, TodoActionType>\r\n\r\n//Thunk\r\n\r\nexport const loadTasksThunk = (todolistId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch) => (\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items\r\n                dispatch(getTasks(allTasks, todolistId))\r\n            })\r\n    )\r\n}\r\nexport const addTodolistTC = (title: string): ThunkType => {\r\n    return (dispatch: any) => {\r\n        api.createTodolist(title)\r\n            .then(res => {\r\n                let todolist = res.data.data.item;\r\n                dispatch(addTodolist(todolist))\r\n            })\r\n    }\r\n}\r\nexport const deleteTodolistTC = (todoListId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch) => {\r\n        api.deleteTodolist(todoListId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) dispatch(deleteTodolist(todoListId));\r\n            })\r\n    }\r\n}\r\nexport const restoreTodolistTC = (): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch: any) => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                dispatch(getTodoList(res.data))\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });\r\n    }\r\n}\r\n// task TaskType\r\nexport const changeTaskTC = (todoListId: string, taskId: string, task: TaskType, obj: any): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch) => {\r\n        api.putTask(todoListId, taskId, task)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    let task: TaskType = res.data.data.item;\r\n                    dispatch(changeTask(task, todoListId, taskId));\r\n                }\r\n                ;\r\n            })\r\n            .catch((err) => {\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (newTitle: string, todoListId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch: any) => {\r\n        api.createTask(newTitle, todoListId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(addTask(res.data.data.item, todoListId));\r\n            })\r\n    }\r\n}\r\nexport const deleteTaskTC = (todoListId: string, taskId: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch: any) => {\r\n        api.deleteTask(todoListId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(deleteTask(taskId, todoListId))\r\n            })\r\n    }\r\n}\r\nexport const changeTitleTC = (todoListId: string, newTitle: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch: any) => {\r\n        api.changeTodolistTitle(todoListId, newTitle)\r\n            .then(res => {\r\n\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTitleTodolist(todoListId, newTitle))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const authorizeTC = (email: string, password: string): ThunkAction<void, InitialStateType, unknown, TodoActionType> => {\r\n    return (dispatch: any) => {\r\n        api.login(email, password)\r\n            .then(res => {\r\n               if(res.resultCode === 0) {\r\n                   dispatch(approveAuth(true))\r\n               }\r\n            })\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, Container, Grid, Paper, TextField} from \"@material-ui/core\";\r\nimport {connect} from \"react-redux\";\r\nimport {authorizeTC} from \"./reducer\";\r\n\r\ntype OwnPropsType = {\r\n    authorizeTC: (email: string, password: string)=>void\r\n}\r\n\r\nconst Login = (props: OwnPropsType) => {\r\n\r\n    const [email, setEmail] = useState<string>('free@samuraijs.com');\r\n    const [password, setPassword] = useState<string>('free');\r\n\r\n\r\n\r\n    const changeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    };\r\n    const changePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    };\r\n    const send = () =>{\r\n        props.authorizeTC(email,password)\r\n    };\r\n\r\n    return (\r\n\r\n\r\n        <Container fixed maxWidth={\"sm\"} style={{height: '100vh'}}>\r\n            <Grid container justify='center' alignItems='center' style={{width: '100%', height: '100vh'}}>\r\n\r\n                <Paper elevation={5}\r\n                       style={{\r\n                           padding: '50px',\r\n                           minWidth: '200px',\r\n                           maxWidth: '240px'\r\n                       }}>\r\n                    <h3>Login</h3>\r\n                    <TextField placeholder='email' value={email} onChange={changeEmail}/>\r\n                    <TextField placeholder='password' value={password} onChange={changePassword} style={{padding: '10px 0px'}}/>\r\n                    <Button variant='contained' color='primary' onClick={send}>Send</Button>\r\n\r\n                </Paper>\r\n\r\n            </Grid>\r\n        </Container>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default connect(null, {authorizeTC})(Login)","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {deleteTaskTC} from \"./reducer\";\nimport {TaskType, TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\nimport {Checkbox, IconButton, TextField} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype StateType = {\n    editMode: boolean\n    title: string\n}\ntype OwnPropsType = {\n    task: TaskType\n    title: string\n    isDone: number //string\n    priority: string\n    changeStatus: (task: string, status: number) => void\n    changeTitle: (taskId: string, checked: string) => void\n    todoListId: string\n}\n\n\nclass TodoListTask extends React.Component <PropsType, StateType> {\n    state: StateType = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.title)\n    };\n\n    onIsDoneChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status)\n\n    };\n    onTitleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n    deleteTask = () => {\n        this.props.deleteTaskTC(this.props.todoListId, this.props.task.id)\n    };\n    render = () => {\n        let classForTask = (this.props.task.status === 2)\n            ? \"todoList-task done\"\n            : \"todoList-task\";\n        return (\n            <div className=\"todoList-tasks\">\n                <div className={classForTask}>\n                    <Checkbox color='primary'\n                           checked={this.props.task.status === 2 ? true : false}\n                           onChange={this.onIsDoneChanged}\n                    />\n                    {this.state.editMode ? <TextField\n                            variant='outlined'\n                            value={this.state.title}\n                            autoFocus={true}\n                            onChange={this.onTitleChanged}\n                            onBlur={this.deactivateEditMode}/> :\n                        <span onClick={this.activateEditMode}>\n                          {this.props.task.title}\n                    </span>\n                    }\n                    <IconButton onClick={this.deleteTask}>\n                        <Delete/>\n                    </IconButton>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype MapStateToPropsType = {\n    todolists: TodoListType[]\n\n}\ntype MapDispatchPropsType = {\n    deleteTaskTC: (todolistId: string, taskId: string) => void\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n\n    return {\n        todolists: state.todolist.todolists\n    }\n};\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStateToPropsType\n\n\nconst connectedTodoListTask = connect(mapStateToProps, {deleteTaskTC})(TodoListTask)\n\nexport default connectedTodoListTask;\n\n","import React from 'react';\nimport './TodoListTask'\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entities\";\n\ntype OwnPropsType = {\n    tasks: TaskType[]\n    changeStatus: (task: string, status: number)=>void\n    changeTitle: (taskId: string, checked: string)=>void\n    todoListId: string\n\n}\n\nclass TodoListTasks extends React.Component<OwnPropsType> {\n\n\n    render = () => {\n\n        let tasksEls = this.props.tasks.map((t) => {\n            return <TodoListTask task={t}\n                                 title={t.title}\n                                 isDone={t.status}\n                                 priority={t.priority}\n                                 changeStatus={this.props.changeStatus}\n                                 changeTitle={this.props.changeTitle}\n                                 todoListId={this.props.todoListId}\n                                 key={t.id}\n                    />\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksEls}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport {Button} from \"@material-ui/core\";\n\n\ntype StateType = {\n    isHidden: boolean\n}\ntype OwnPropsType = {\n    changeFilter: (incoming:string)=>void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<OwnPropsType>  {\n\n\n\n    state: StateType = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {this.props.changeFilter('All')};\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.changeFilter('Active')};\n\n    render = () => {\n        \n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <>\n                    <Button variant={this.props.filterValue === \"All\" ? \"contained\" : \"text\"}\n                            color={this.props.filterValue === 'All' ? 'primary' : \"default\"}\n                            onClick={this.onAllFilterClick}>All</Button>\n                    <Button variant={this.props.filterValue === \"Completed\" ? \"contained\" : \"text\"}\n                            color={this.props.filterValue === 'Completed' ? 'primary' : \"default\"}\n                            onClick={this.onCompletedFilterClick}>Completed</Button>\n                    <Button variant={this.props.filterValue === \"Active\" ? \"contained\" : \"text\"}\n                            color={this.props.filterValue === 'Active' ? 'primary' : \"default\"}\n                            onClick={this.onActiveFilterClick}>Active</Button>\n                </>}\n\n\n                {!this.state.isHidden && <span onClick={() =>{this.setState({isHidden: true})}}>Hide</span>}\n                {this.state.isHidden && <span onClick={() =>{this.setState({isHidden: false})}}>Show</span>}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype StateType = {\n    error: boolean\n    title: string\n}\ntype OwnPropsType = {\n    addItem: (newTitle: string)=>void\n}\n\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\n\n    state: StateType = {\n        error: false,\n        title: ''\n    };\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title:''});\n        if(newTitle === ''){\n            this.setState({error: true})\n        }\n        else{\n            this.setState({error: false});\n            this.props.addItem(newTitle);\n        }\n    };\n    onTitleChanged = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        let newTitle = e.currentTarget.value;\n        this.setState({\n            error: false,\n            title: newTitle})\n    };\n    onAddItemEnterPress = (e: React.KeyboardEvent<HTMLDivElement>) =>{\n        if(e.key === 'Enter'){\n            this.onAddItemClick();\n        }\n    };\n    render() {\n    let error = this.state.error? 'This is required' : '';\n        return (\n                <div className=\"NewItemForm\">\n                    <TextField\n                        variant='outlined'\n                        value={this.state.title}\n                        onChange={this.onTitleChanged}\n                        placeholder=\"New Item name\"\n                        error={this.state.error}\n                        helperText={error}\n                        onKeyPress={this.onAddItemEnterPress}/>\n                    <IconButton color='primary' onClick={this.onAddItemClick}>\n                        <AddBox />\n                    </IconButton>\n                </div>\n        );\n\n    }\n}\nexport default AddNewItemForm;","import React from 'react'\r\nimport style from './TodoList.module.css'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n    todoListId: string\r\n    changeTitleTC: (todoListId: string, currentTitle: string) => void\r\n    deleteTodolist: () => void\r\n}\r\ninterface stateType {\r\n    editMode: boolean\r\n    currentTitle: string\r\n}\r\n\r\nclass TodoListTitle extends React.Component <OwnPropsType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        currentTitle: this.props.title\r\n    };\r\n\r\n    activeMode = () => {\r\n\r\n        this.setState({editMode: true})\r\n\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.changeTitleTC(this.props.todoListId, this.state.currentTitle)\r\n\r\n    };\r\n    titleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({currentTitle: e.currentTarget.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.editMode ?\r\n                    <span className={style.title}>\r\n            <h3 onClick={this.activeMode} className=\"todoList-header__title\">{this.props.title}</h3>\r\n                       <IconButton onClick={this.props.deleteTodolist}>\r\n                           <Delete/>\r\n                       </IconButton>\r\n                   </span> :\r\n                    <TextField\r\n                        variant='outlined'\r\n                        onBlur={this.deactivateEditMode}\r\n                        autoFocus={true}\r\n                        value={this.state.currentTitle}\r\n                        onChange={this.titleChanged}\r\n                    />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle","import React from 'react'\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n    deleteTodolist: ()=>void\r\n    todoListId: string\r\n    changeTitleTC: (todoListId: string, newTitle: string)=>void\r\n    addItem: (newTitle: string)=>void\r\n}\r\n\r\nclass TodoListHeader extends React.Component<OwnPropsType> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <TodoListTitle title={this.props.title}\r\n                               deleteTodolist={this.props.deleteTodolist}\r\n                               todoListId={this.props.todoListId}\r\n                               changeTitleTC={this.props.changeTitleTC}/>\r\n                <AddNewItemForm addItem={this.props.addItem}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListHeader","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListHeader from \"./TodoListHeader\";\nimport {connect} from \"react-redux\";\nimport {\n     addTaskTC, changeTaskTC, changeTitleTC,\n    changeTitleTodolist, deleteTodolistTC, loadTasksThunk,\n} from \"./reducer\";\n\nimport {TaskType} from \"./types/entities\";\nimport {Grid, Paper} from \"@material-ui/core\";\n\nclass TodoList extends React.Component<PropsType, StateType> {\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state: StateType = {\n        tasks: [],\n        filterValue: 'All'\n    };\n\n\n    restoreState=()=> {\n        this.props.loadTasksThunk(this.props.id)\n    };\n\n    deleteTodolist = ()=>{\n        this.props.deleteTodolistTC(this.props.id)\n    };\n\n    changeTask = (taskId: string, obj: object) => {\n\n\n        let changedTask = this.props.tasks.find(task => {\n\n            return task.id === taskId\n        });\n        let task = {...changedTask, ...obj} as TaskType;\n        this.props.changeTaskTC(this.props.id, taskId, task, obj);\n    };\n\n\n    changeStatus = (taskId: string, status: number) => {\n        this.changeTask(taskId, {status}) //{status: status}\n    };\n\n    changeTitle = (taskId: string, newTitle: string) => {\n\n        this.changeTask(taskId, {title:newTitle})\n\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState({filterValue: newFilterValue})\n    };\n\n\n    addTask = (newTitle: string) => {\n        this.props.addTaskTC(newTitle, this.props.id)\n\n    };\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n\n                        <Grid item >\n                            <Paper style={{margin: '10px', padding: '10px'}}>\n                    <TodoListHeader addItem={this.addTask}\n                                    title={this.props.title}\n                                    deleteTodolist={this.deleteTodolist}\n                                    todoListId={this.props.id}\n                                    changeTitleTC={this.props.changeTitleTC}\n                        />\n\n                    <TodoListTasks\n                        changeTitle={this.changeTitle}\n                        changeStatus={this.changeStatus}\n                        tasks={tasks.filter(t => {\n                            if (this.state.filterValue === 'All') {\n                                return true;\n                            }\n                            if (this.state.filterValue === 'Active') {\n                                return t.status === 0;\n                            }\n                            if (this.state.filterValue === 'Completed') {\n                                return t.status === 2;\n                            }\n                        })}\n                        todoListId={this.props.id}/>\n\n                    <TodoListFooter\n                        filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                            </Paper>\n                        </Grid>\n                </div>\n            </div>\n\n        );\n    }\n}\n\ntype StateType = {\n    tasks: TaskType[]\n    filterValue: string\n}\ntype MapDispatchToPropsType = {\n\n    loadTasksThunk: (todlilistId: string)=>void\n    deleteTodolistTC: (todlilistId: string)=>void\n    addTaskTC: (newTitle: string, todolistId: string)=>void\n    changeTitleTodolist: (todoListId: string, newTitle: string)=>void // delete\n    changeTitleTC: (todoListId: string, newTitle: string)=>void\n    changeTaskTC: (todoListId: string, taskId: string, task: TaskType, obj: object)=>void\n}\n\n\ntype OwnPropsType = {\n\n    id: string\n    title: string\n    tasks: TaskType[]\n}\ntype PropsType = MapDispatchToPropsType  & OwnPropsType\n\n\nconst ConnectedTodoList = connect<null, MapDispatchToPropsType,  OwnPropsType>(null, {\n     changeTitleTodolist, loadTasksThunk, deleteTodolistTC, changeTaskTC, addTaskTC, changeTitleTC})(TodoList);\n\nexport default ConnectedTodoList;\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolistTC, restoreTodolistTC} from \"./reducer\";\nimport {TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\n\n\nclass App extends React.Component<PropsType & StateType> {\n\n    state = {\n        todolists: [],\n        login: false\n    };\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        this.props.restoreTodolistTC()\n    };\n\n\n    addTodolist = (title: string) => {\n        this.props.addTodolistTC(title)\n    };\n\n\n\n    render = () => {\n\n        let todolist = this.props.todolists.map(tl => <TodoList id={tl.id} title={tl.title} tasks={tl.tasks} key={tl.id}/>);\n\n        return (\n\n            <div className='App'>\n\n                    <div>\n                        <AppBar position='static'>\n                            <Toolbar>\n                                <IconButton edge='start' color='inherit'>\n                                    <Menu/>\n                                </IconButton>\n                                <Typography variant='h6'>\n                                    News\n                                </Typography>\n                                <Button color='inherit'>Login</Button>\n                            </Toolbar>\n                        </AppBar>\n                        <Container fixed>\n                            <Grid container style={{padding: '20px 10px'}}>\n                                <AddNewItemForm addItem={this.addTodolist}/>\n                            </Grid>\n                            <Grid container spacing={2}>\n\n                                {todolist}\n\n                            </Grid>\n                        </Container>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n\n    return {\n        todolists: state.todolist.todolists,\n        auth: state.todolist.auth\n    }\n};\n\nconst ConnectedRoot = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps,\n    {\n        addTodolistTC, restoreTodolistTC\n    })(App);\n\nexport default ConnectedRoot;\n\ntype StateType = {\n    todolists: TodoListType[]\n}\ntype OwnPropsType = {\n    todolists: TodoListType[]\n}\ntype MapStateToPropsType = {\n    todolists: TodoListType[]\n    auth: boolean\n}\ntype MapDispatchToPropsType = {\n    addTodolistTC: (title: string) => void\n    restoreTodolistTC: () => void\n}\n\ntype PropsType = OwnPropsType & MapDispatchToPropsType & MapStateToPropsType\n\n","import React from 'react';\nimport './App.css';\nimport {TodoListType} from \"./types/entities\";\nimport {Redirect, Route} from \"react-router\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"./store\";\nimport Login from \"./Login\";\nimport ConnectedRoot from \"./Root\";\n\ntype StateType = {\n    todolists: TodoListType[]\n}\n\nconst App = (props: StateType) => {\n\n    const auth = useSelector((state:AppStateType) => state.todolist.auth);\n\n        return (\n\n            <div className='App'>\n\n                <Route path={'/login'} component={Login}/>\n                <Route path={'/todo'} component={ConnectedRoot}/>\n\n                {!auth? <Redirect to='/login' /> : <Redirect to='/todo'/>}\n\n            </div>\n        );\n    };\n\n\n\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//import React from 'react';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({todolist: reducer})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App todolists={[]}/>\n        </Provider>\n    </HashRouter>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodoList_title__PI9d0\",\"buttonOfDelete\":\"TodoList_buttonOfDelete__1JPCm\"};"],"sourceRoot":""}